"""Lab 4, Distributed & Network ProgrammingTCP Client-Server GameServer side"""# python 4number-guessing-game/server.py 1234import randomimport sysimport socketimport threadingSERVER_BUFFER_SIZE = 1024IP = "127.0.0.1"def game_logic(port):    gameSocket = socket.socket(type=socket.SOCK_STREAM)    gameSocket.bind((IP, port))    gameSocket.settimeout(5)    gameSocket.listen(1)    try:        connection, client_address = gameSocket.accept()        connection.sendall("Welcome to the number guessing game!\nEnter the range:".encode())        lower, upper = connection.recv(SERVER_BUFFER_SIZE).decode().split()        lower = int(lower)        upper = int(upper)        chosen_number = random.randint(min(lower, upper), max(lower, upper))        attempts_left = 5        victory = False        while attempts_left > 0 and not victory:            connection.sendall(f"You have {attempts_left} attempts".encode())            client_guess = int(connection.recv(SERVER_BUFFER_SIZE).decode())            if client_guess == chosen_number:                victory = True                message = "You win!"            elif client_guess < chosen_number:                message = "Greater"            else:                message = "Less"            connection.sendall(message.encode())            attempts_left -= 1        if not victory:            connection.sendall("You lose".encode())        gameSocket.close()    except socket.timeout:        print("timeout occurred")    finally:        gameSocket.close()        available_ports.add(port)if __name__ == '__main__':    TCPServerSocket = socket.socket(type=socket.SOCK_STREAM)    try:        if len(sys.argv) != 2:            raise ValueError()        port = int(sys.argv[1])        TCPServerSocket.bind((IP, port))    except ValueError as e:        sys.exit("Usage example: python ./server.py <port>")    except socket.error as e:        sys.exit("Error while binding to the specified port")    print(f"Starting the server on {IP}:{port}")    TCPServerSocket.listen(1)    available_ports = {6475, 3948}    while True:        print("Waiting for a connection")        connection, client_address = TCPServerSocket.accept()        if available_ports != set():            print("Client connected")            port = available_ports.pop()            connection.sendall(port.to_bytes(4, byteorder='big'))            connection.close()            thread = threading.Thread(target=game_logic, args=(port, ))            thread.start()        else:            print("Server is full")            connection.sendall(b'Server is full')            connection.close()